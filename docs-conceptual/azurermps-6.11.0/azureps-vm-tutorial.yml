### YamlMime:Tutorial
title: Azure PowerShell で仮想マシンを作成する
metadata:
  title: Azure PowerShell で仮想マシンを作成する
  description: 仮想マシンを作成して Azure PowerShell を開始します。
  audience: Developer
  level: Beginner
  displayType: two-column
  interactive: azurepowershell
  ms.date: 02/08/2018
  ms.author: sttramer
  author: sptramer
  manager: carmonm
  ms.devlang: azure-powershell
  ms.prod: powershell
  ms.technology: azure-powershell
  ms.topic: tutorial
  clicktale: true
  ms.openlocfilehash: 44fc35219e108b47cfa1fac35b1444e20d0cc1a3
  ms.sourcegitcommit: ff44dec6418a449757bded3c6ebe0a7d4c05ee6e
  ms.translationtype: HT
  ms.contentlocale: ja-JP
  ms.lasthandoff: 11/01/2018
  ms.locfileid: "50738004"
items:
- durationInMinutes: 1
  content: >-
    このチュートリアルでは、Azure PowerShell を使用した仮想マシンの設定に関連するすべての手順について学習します。 チュートリアルでは、出力クエリ、Azure リソースの再利用、およびリソースのクリーンアップについても説明します。


    これは、Azure Cloud Shell によって提供される対話型チュートリアルです。また、ローカルに [Azure PowerShell をインストール](install-azurerm-ps.md)することもできます。


    チュートリアルのテキストを Azure Cloud Shell に貼り付けるには、__Ctrl + Shift + V__ キー (macOS の場合は __cmd-v shift__) を使用します。
- durationInMinutes: 1
  title: '[サインイン]'
  content: >-
    Azure PowerShell のローカル インストールを使用している場合は、最初にサインインしてから、他の手順を実行します。


    ```powershell

    Connect-AzureRmAccount

    ```


    ご使用の端末に表示される手順に従って、サインイン プロセスを完了してください。
- durationInMinutes: 1
  title: リソース グループの作成
  content: >-
    Azure では、すべてのリソースがリソース管理グループに割り当てられます。 リソース グループではリソースを論理グループに分類できるため、コレクションとして操作しやすくなります。

    このチュートリアルでは、作成されたすべてのリソースが、`TutorialResources` という名前の 1 つのグループに割り当てられます。


    ```powershell

    New-AzureRmResourceGroup -Name TutorialResources -Location eastus

    ```


    ```Output

    ResourceGroupName : TutorialResources

    Location          : eastus

    ProvisioningState : Succeeded

    Tags              :

    ResourceId        : /subscriptions/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX/resourceGroups/TutorialResources

    ```
- durationInMinutes: 1
  title: VM の管理者資格情報の作成
  content: >-
    新しい仮想マシンを作成する前に、Windows VM の管理者アカウントのユーザー名とパスワードを含む資格情報オブジェクトを作成する必要があります。


    ```powershell

    $cred = Get-Credential -Message "Enter a username and password for the virtual machine."

    ```


    メッセージが表示されたら、ユーザー名とパスワードを入力します。 結果として得られる資格情報オブジェクトは、次の手順でパラメーターとして渡されます。


    ```Output

    Windows PowerShell credential request.

    Enter a username and password for the virtual machine.

    User: tutorAdmin

    Password for user tutorAdmin: *********

    ```
- durationInMinutes: 4
  title: 仮想マシンの作成
  content: >-
    Azure の仮想マシンには依存関係が多数含まれます。 Azure PowerShell では、指定したコマンドライン引数に基づいてこのようなリソースが自動的に作成されます。 読みやすくするために、[PowerShell スプラッティング](/powershell/module/microsoft.powershell.core/about/about_splatting)を使用して Azure PowerShell コマンドレットにパラメーターを渡します。


    Windows を実行する新しい仮想マシンを作成します。


    ```powershell

    $vmParams = @{
      ResourceGroupName = 'TutorialResources'
      Name = 'TutorialVM1'
      Location = 'eastus'
      ImageName = 'Win2016Datacenter'
      PublicIpAddressName = 'tutorialPublicIp'
      Credential = $cred
      OpenPorts = 3389
    }

    $newVM1 = New-AzureRmVM @vmParams

    ```

    VM が作成されるとき、使用されているパラメーター値と、作成中の Azure リソースが表示されます。

    PowerShell では、次のように進行状況バーが置き換えられます。


    ```Output
     Creating Azure resources
      39% \
      [ooooooooooooooooooooooooooooooooooo                                                                 ]

      Creating TutorialVM1 virtual machine.
    ```


    VM の準備ができたら、Azure Portal で、または \$newVM1 変数を調べることによって、結果を表示できます。


    ```powershell

    $newVM1

    ```


    ```Output

    ResourceGroupName : TutorialResources

    Id                : /subscriptions/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX/resourceGroups/TutorialResources/providers/Microsoft.Compute/virtualMachines/TutorialVM1

    VmId              : 12345678-9abc-def0-1234-56789abcedf0

    Name              : TutorialVM1

    Type              : Microsoft.Compute/virtualMachines

    Location          : eastus

    Tags              : {}

    HardwareProfile   : {VmSize}

    NetworkProfile    : {NetworkInterfaces}

    OSProfile         : {ComputerName, AdminUsername, WindowsConfiguration, Secrets}

    ProvisioningState : Succeeded

    StorageProfile    : {ImageReference, OsDisk, DataDisks}

    ```


    中かっこ内に表示されているプロパティ値は、入れ子になったオブジェクトです。 次の手順で、これらの入れ子になったオブジェクトの特定の値を表示する方法を説明します。
- durationInMinutes: 5
  title: クエリでの VM 情報の取得
  content: >-
    先ほど作成した VM から、より詳細な情報をいくつか取得してみましょう。 この例では、VM の名前と、作成した管理者アカウントを確認します。


    ```powershell

    $newVM1.OSProfile | Select-Object ComputerName,AdminUserName

    ```


    ```Output

    ComputerName AdminUsername

    ------------ -------------

    TutorialVM1  tutorialAdmin

    ```


    他の Azure PowerShell コマンドを使用して、ネットワーク構成に関する個別の情報を取得することができます。


    ```powershell

    $newVM1 | Get-AzureRmNetworkInterface |
      Select-Object -ExpandProperty IpConfigurations |
        Select-Object Name,PrivateIpAddress
    ```


    この例では、PowerShell のパイプラインを使用して、\$newVM1 オブジェクトを `Get-AzureRmNetworkInterface` コマンドレットに送信しています。 結果として得られるネットワーク インターフェイス オブジェクトから、入れ子になった IpConfigurations オブジェクトを選択しています。 IpConfigurations オブジェクトから Name プロパティと PrivateIpAddress プロパティを選択しています。


    ```Output

    Name        PrivateIpAddress

    ----        ----------------

    TutorialVM1 192.168.1.4

    ```


    VM が実行されていることを確認するには、リモート デスクトップ経由で接続する必要があります。 そのために、パブリック IP アドレスを知っている必要があります。


    ```powershell

    $publicIp = Get-AzureRmPublicIpAddress -Name tutorialPublicIp -ResourceGroupName TutorialResources


    $publicIp | Select-Object Name,IpAddress,@{label='FQDN';expression={$_.DnsSettings.Fqdn}}

    ```


    この例では、`Get-AzureRmPublicIpAddress` を使用して、\$publicIp 変数に結果を格納しています。 この変数からプロパティを選択し、式を使用して、入れ子になった Fqdn プロパティを取得しています。


    ```Output

    Name             IpAddress           FQDN

    ----             ---------           ----

    tutorialPublicIp <PUBLIC_IP_ADDRESS> tutorialvm1-8a0999.eastus.cloudapp.azure.com

    ```


    ローカル コンピューターからリモート デスクトップ経由で次のコマンドを実行して、VM に接続できます。


    ```powershell

    mstsc.exe /v <PUBLIC_IP_ADDRESS>

    ```


    オブジェクトのプロパティに対するクエリ実行の詳細については、「[Azure リソースに対するクエリ](./queries-azureps.md)」を参照してください。
- durationInMinutes: 4
  title: 既存のサブネットでの新しい VM の作成
  content: >-
    2 番目の VM では既存のサブネットを使用します。


    ```powershell

    $vm2Params = @{
      ResourceGroupName = 'TutorialResources'
      Name = 'TutorialVM2'
      ImageName = 'Win2016Datacenter'
      VirtualNetworkName = 'TutorialVM1'
      SubnetName = 'TutorialVM1'
      PublicIpAddressName = 'tutorialPublicIp2'
      Credential = $cred
      OpenPorts = 3389
    }

    $newVM2 = New-AzureRmVM @vm2Params


    $newVM2

    ```


    ```Output

    ResourceGroupName        : TutorialResources

    Id                       : /subscriptions/XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX/resourceGroups/TutorialResources/providers/Microsoft.Compute/virtualMachines/TutorialVM2

    VmId                     : 12345678-9abc-def0-1234-56789abcedf1

    Name                     : TutorialVM2

    Type                     : Microsoft.Compute/virtualMachines

    Location                 : eastus

    Tags                     : {}

    HardwareProfile          : {VmSize}

    NetworkProfile           : {NetworkInterfaces}

    OSProfile                : {ComputerName, AdminUsername, WindowsConfiguration, Secrets}

    ProvisioningState        : Succeeded

    StorageProfile           : {ImageReference, OsDisk, DataDisks}

    FullyQualifiedDomainName : tutorialvm2-dfa5af.eastus.cloudapp.azure.com

    ```


    新しい VM のパブリック IP アドレスは、\$newVM2 オブジェクトの FullyQualifiedDomainName プロパティで返されるので、取得するいくつかの手順をスキップできます。 リモート デスクトップで次のコマンドを使用して接続します。


    ```powershell

    mstsc.exe /v $newVM2.FullyQualifiedDomainName

    ```
- durationInMinutes: 4
  title: クリーンアップ
  content: >-
    これでチュートリアルは終了です。次は、作成したリソースをクリーンアップします。 `Remove-AzureRmResource` コマンドを使用すると個別のリソースを削除できますが、リソース グループ内のすべてのリソースを削除する最も安全な方法は、`Remove-AzureRmResourceGroup` コマンドを使用してグループを削除することです。


    ```powershell

    $job = Remove-AzureRmResourceGroup -Name TutorialResources -Force -AsJob


    $job

    ```


    ```Output

    Id     Name            PSJobTypeName   State         HasMoreData     Location             Command

    --     ----            -------------   -----         -----------     --------             -------

    1      Long Running... AzureLongRun... Running       True            localhost            Remove-AzureRmResource...

    ```


    このコマンドは、チュートリアルで作成したリソースを削除し、必ず正しい順序でその割り当てを解除します。 `-AsJob` パラメーターは、削除の実行中に PowerShell がブロックされないようにします。 削除が完了するまで待機するには、次のコマンドを使用します。


    ```powershell

    Wait-Job -Id $job.Id

    ```


    クリーンアップが完了したら、チュートリアルは終了です。 引き続き、ここで学習した内容を簡単に確認し、次のステップで役立つリソースへのリンクを紹介します。
- durationInMinutes: 1
  title: まとめ
  content: "\nお疲れさまでした。 ここでは、新規または既存のリソースを使用して VM を作成する方法を学習し、式とその他の Azure PowerShell コマンドを使用してデータを取得してシェル変数に格納しました。また、Azure VM 用に作成されたリソースをいくつか確認しました。\n\n次の作業は、Azure PowerShell の使用方法によって異なります。 このチュートリアルで説明した機能の詳細を説明した資料には、さまざまなものがあります。\n\n### <a name=\"in-depth-azure-powershell-documentation\"></a>詳細な Azure PowerShell のドキュメント\n\n時間をとって、一連の完全な [Azure PowerShell のドキュメント](overview.md)を確認できます。\n\nこのチュートリアルで使用されているコマンドの詳細については、次の記事をご覧ください。\n\n- [New-AzureRmResourceGroup](/powershell/module/azurerm.resources/new-azurermresourcegroup)\n- [Get-Credential](/powershell/module/microsoft.powershell.security/get-credential)\n- [New-AzureRmVM](/powershell/module/azurerm.compute/new-azurermvm)\n- [Select-Object](/powershell/module/microsoft.powershell.utility/select-object)\n- [Get-AzureRmPublicIpAddress](/powershell/module/azurerm.network/get-AzureRmPublicIpAddress)\n- [Remove-AzureRmResourceGroup](/powershell/module/azurerm.resources/Remove-AzureRmResourceGroup)\n- [Wait-Job](/powershell/module/microsoft.powershell.core/wait-job)\n\n次の記事では、このチュートリアルで示した機能について詳しく説明します。\n\n- [PowerShell スプラッティング](/powershell/module/microsoft.powershell.core/about/about_splatting)\n- [クエリ](queries-azureps.md)\n- [書式設定](formatting-output.md)\n- [PowerShell ジョブの使用](using-psjobs.md)\n\n### <a name=\"sample-scripts\"></a>サンプルのスクリプト\n\n特定のタスクをすぐに開始する必要がある場合は、サンプル スクリプトを確認してください。\n\n- [Linux Virtual Machines](/azure/virtual-machines/linux/powershell-samples?toc=%2fpowershell%2fmodule%2ftoc.json)\n- [Windows Virtual Machines](/azure/virtual-machines/windows/powershell-samples?toc=%2fpowershell%2fmodule%2ftoc.json)\n- [Web Apps](/azure/app-service-web/app-service-powershell-samples?toc=%2fpowershell%2fmodule%2ftoc.json)\n- [SQL Database](/azure/sql-database/sql-database-powershell-samples?toc=%2fpowershell%2fmodule%2ftoc.json)\n- [Cosmos DB](/azure/cosmos-db/powershell-samples?toc=%2fpowershell%2fmodules%2ftoc.json)\n\n### <a name=\"feedback\"></a>フィードバック\n\nフィードバック、ご提案、ご質問はさまざまな方法で送信できます。\n\n* `Send-Feedback` は Azure PowerShell の組み込みコマンドで、自由形式のフィードバックをチームに提供できます。\n* [Azure PowerShell リポジトリ](https://github.com/Azure/azure-powershell/issues)で、機能要求またはバグ レポートを提出できます。\n* [Azure PowerShell ドキュメント リポジトリ](https://github.com/Azure/azure-docs-powershell/issues)で問題を報告することで、ご質問や内容確認を行うことができます。\n\nAzure PowerShell をご利用いただけましたら幸いです。"
